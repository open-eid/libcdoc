cmake_minimum_required(VERSION 3.21)

if(POLICY CMP0167)
    cmake_policy(SET CMP0167 NEW)
endif()

project(libcdoc VERSION 0.1.7)

macro(SET_ENV NAME DEF)
    if(DEFINED ENV{${NAME}})
        set(${NAME} $ENV{${NAME}} ${ARGN})
    else()
        set(${NAME} ${DEF} ${ARGN})
    endif()
endmacro()

SET_ENV(BUILD_NUMBER 0)
set(VERSION ${PROJECT_VERSION}.${BUILD_NUMBER})
set(CMAKE_CXX_STANDARD 20)
set(CMAKE_CXX_STANDARD_REQUIRED YES)
set(CMAKE_C_VISIBILITY_PRESET hidden)
set(CMAKE_CXX_VISIBILITY_PRESET hidden)
set(CMAKE_VISIBILITY_INLINES_HIDDEN YES)
set(BUILD_TOOLS YES CACHE BOOL "Build cdoc-tool" )
set(BUILD_SHARED_LIBS YES CACHE BOOL "Build library as SHARED or STATIC")
set(CMAKE_DEBUG_POSTFIX "d" CACHE STRING "Adds a postfix for debug-built libraries.")
set(CPACK_PACKAGE_VERSION ${VERSION})
set(CPACK_GENERATOR RPM)
set(CPACK_PACKAGE_CONTACT "RIA <info@ria.ee>")
set(CPACK_PACKAGE_VENDOR RIA)
set(CPACK_PACKAGING_INSTALL_PREFIX /usr)
list(APPEND CPACK_RPM_RELOCATION_PATHS ${CMAKE_INSTALL_SYSCONFDIR})
set(CPACK_RPM_FILE_NAME RPM-DEFAULT)
set(CPACK_RPM_PACKAGE_RELEASE_DIST ON)
set(MACOSX_BUNDLE_COPYRIGHT "(C) 2017-2025 Estonian Information System Authority")
set(MACOSX_FRAMEWORK_SHORT_VERSION_STRING ${PROJECT_VERSION})
set(MACOSX_FRAMEWORK_BUNDLE_VERSION ${BUILD_NUMBER})
if(APPLE)
    set(FRAMEWORK YES CACHE BOOL "Build library as Mac OS X Framework")
    set(FRAMEWORK_DESTINATION /Library/Frameworks CACHE PATH "Mac OS X Framework install destination")
endif()
include(CPack)
include(GNUInstallDirs)

option(LIBCDOC_WITH_DOCS "Generate documentation with Doxygen" ON)

find_package(OpenSSL 3.0.0 REQUIRED)
find_package(ZLIB REQUIRED)
find_package(LibXml2 REQUIRED)
find_package(FlatBuffers CONFIG REQUIRED NAMES FlatBuffers Flatbuffers flatbuffers)
find_package(SWIG)
if(SWIG_FOUND)
    find_package(Java COMPONENTS Development)
    find_package(JNI)
    find_package(Python3 COMPONENTS Interpreter Development)
endif()

if(LIBCDOC_WITH_DOCS)
    find_package(Doxygen)
    if( DOXYGEN_FOUND )
        configure_file(${PROJECT_SOURCE_DIR}/etc/Doxyfile.in Doxyfile @ONLY)
        add_custom_target(docs ALL
            Doxygen::doxygen Doxyfile
            WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}
            COMMENT "Generating API documentation with Doxygen" VERBATIM
        )
        install(DIRECTORY ${CMAKE_BINARY_DIR}/doc/ DESTINATION ${CMAKE_INSTALL_DOCDIR})
        install(DIRECTORY doc/ DESTINATION ${CMAKE_INSTALL_DOCDIR})
    endif()
endif()

add_subdirectory(cdoc)

find_package(Boost COMPONENTS unit_test_framework QUIET)
if (TARGET Boost::unit_test_framework)
    enable_testing()
    add_subdirectory(test)
endif()
